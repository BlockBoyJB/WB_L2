package main

import (
	"fmt"
	"sort"
	"strings"
)

/*
=== Поиск анаграмм по словарю ===

Напишите функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: Ссылка на мапу множеств анаграмм.
Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого, слово из множества. Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

Программа должна проходить все тесты. Код должен проходить проверки go vet и golint.
*/

func main() {
	words := []string{"тяпка", "пятак", "пятка", "листок", "слиток", "столик"}

	fmt.Println(FindAnagrams(words))
}

func FindAnagrams(words []string) map[string][]string {
	exist := make(map[string]bool, len(words))
	anagrams := make(map[string][]string) // ключ - набор букв анаграммы, упорядоченный в алфавитном порядке.

	for _, w := range words {
		w = strings.ToLower(w)
		if exist[w] {
			continue
		}
		exist[w] = true

		// Добавляем в мапу анаграмм новое значение.
		// Чтобы слово попало в нужный "бакет", мы сортируем его буквы в алфавитном порядке и вычисляем ключ
		runes := []rune(w)
		sort.Slice(runes, func(i, j int) bool {
			return runes[i] < runes[j]
		})
		key := string(runes)
		anagrams[key] = append(anagrams[key], w)
	}

	result := make(map[string][]string, len(anagrams))
	for _, g := range anagrams {
		sort.Strings(g)
		result[g[0]] = g // кстати не совсем понял, нужно самое первое слово в множество (если нет, то g[1:])
	}
	return result
}
